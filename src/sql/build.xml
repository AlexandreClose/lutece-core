<project name="Lutece - Database Initialisation" default="specific" basedir=".">

	<target name="init" description="Prepare the database by creating it and inserting data">
		<echo message="Preparing the database(s) by creating it and inserting data" />
		<!-- Property file -->
		<property file="build.properties" />
		<property name="db.properties.path" value="../conf/db.properties"/>
		<property name="db.connector.jar.path" value="../lib/mysql-connector-java-5.1.6.jar"/>
		<!-- Webapp database pool configuration file -->
		<property file="${db.properties.path}" />
		<!-- Path to the jar that contain database connector driver -->
		<property name="db.connector.path" value="${db.connector.jar.path}" />
	</target>
	
	<target name="init_update" description="Prepare the database by updating data">
		<echo message="Preparing the database(s) by updating data" />
		<!-- Property file -->
		<property file="build.properties" />
		<property name="db.properties.path" value="../conf/db.properties"/>
		<property name="db.connector.jar.path" value="../lib/mysql-connector-java-5.1.6.jar"/>
		<!-- Webapp database pool configuration file -->
		<property file="${db.properties.path}" />
		<!-- Path to the jar that contain database connector driver -->
		<property name="db.connector.path" value="${db.connector.jar.path}" />
	</target>
	
	<!-- For inport lib ant-contrib -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="ant-contrib/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>
	
	<target name="check_contrib_present">
	
		<available property="contrib.jar.present" resource="net/sf/antcontrib/antlib.xml">
			<classpath >
				<pathelement location="ant-contrib/ant-contrib-1.0b3.jar" />
			</classpath>
		</available>
		
	</target>
	
	<target name="contrib_not_found" unless="contrib.jar.present" depends="check_contrib_present">
		<echo level="warning">
		ATTENTION : package "ant-contrib.jar" is not found in your classpath ANT_HOME/lib.
		You can dowload this on URL "http://sourceforge.net/project/showfiles.php?group_id=36177".
		Version of ant-contrib require is 1.0b3 to work properly.
		
		All tables will be create in core pool portal.
		</echo>
	</target>
	
	<!-- target create specific database on pool define in db.properties-->
	<target name="specific" if="contrib.jar.present" depends="contrib_not_found,db_core_plugin_init,db_plugins_specific_database_init,db_init_old_structure"/>
	
	<!-- Default target to be used with sql/plugins/<plugin name>/core and sql/plugins/<plugin name>/plugin structure -->
	<target name="all" if="contrib.jar.present" depends="contrib_not_found,db_core_plugin_init,db_plugin_init,db_init_old_structure"/>
	
	<!-- target for update script -->
	<target name="update" if="contrib.jar.present" depends="contrib_not_found,db_plugins_specific_database_update"/>
	
	
		<!-- Target that create db -->	
	<target name="init_create_db" depends="init">
		<copy file="../conf/db.properties" tofile="db.properties" overwrite="true"/>	
		<replaceregexp file="db.properties" match="portal.url=(.*)/(.*)\?(.*)" replace="portal.baseUrl=\1" byline="false"/>
		<property file="db.properties" />
		<property name="baseUrl" value="${portal.baseUrl}" />
						
		<copy file="../conf/db.properties" tofile="db.properties" overwrite="true"/>
		<replaceregexp file="db.properties" match="portal.url=(.*)/(.*)\?(.*)" replace="portal.baseName=\2" byline="false"/>	
		<property file="db.properties" />
		<property name="baseName" value="${portal.baseName}" />					
				
		<delete file="db.properties" verbose="true" />
	
	</target>
	
	<!-- Target that create db -->	
	<target name="drop_and_create_db" depends="init_create_db">
		
		<echo message="Create the core database ${baseName} on host ${baseUrl}" />
		<sql driver="${portal.driver}" 
				           url="${baseUrl}" 
				           userid="${portal.user}" 
				           password="${portal.password}"
				           classpath="${db.connector.path}">
				DROP DATABASE IF EXISTS ${baseName};
				CREATE DATABASE IF NOT EXISTS ${baseName};
				USE ${baseName};
		</sql>
	</target>

	<!-- Target that initialize core db -->	
	<target name="core_files" depends="drop_and_create_db">	
		<fileset id="sql.core.files" dir="${basedir}">
			<include name="*.sql" />
		</fileset>	
		<pathconvert refid="sql.core.files" setonempty="false" property="exists.sql.core.files"/>
	</target>
	<target name="db_core_init" if="exists.sql.core.files" depends="core_files">
		<echo message="Preparing the core database" />
		<property name="portal.driver" value="" />
		<property name="portal.url" value="" />
		<property name="portal.user" value="" />
		<property name="portal.password" value="" />
		<sql driver="${portal.driver}" url="${portal.url}" userid="${portal.user}" password="${portal.password}" encoding="utf8" onerror="${on_sql_error}">
			<fileset refid="sql.core.files"/>
			<classpath>
				<pathelement location="${db.connector.path}" />
			</classpath>
		</sql>
	</target>
	
	
	<!-- Target to init core depend plugin database -->
	<target name="plugin_init_core_files" if="contrib.jar.present" depends="db_core_init">	
		<fileset id="sql.core.plugin.files" dir="${basedir}">
			<include name="plugins/**/core/*.sql" />
		</fileset>	
		<pathconvert refid="sql.core.plugin.files" setonempty="false" property="exists.sql.core.plugin.files"/>
	</target>	
	<target name="db_core_plugin_init" depends="plugin_init_core_files" if="exists.sql.core.plugin.files">
		<echo message="Add plugin specific table(s) to the core database"/>	
		<sql driver="${portal.driver}" url="${portal.url}" userid="${portal.user}" password="${portal.password}" encoding="utf8" onerror="${on_sql_error}">
			<fileset refid="sql.core.plugin.files"/>
			<classpath>
				<pathelement location="${db.connector.path}" />
			</classpath>
		</sql>		
	</target>
			
	<!-- ALL command line -->
			
	<!-- Target to init plugin specific database -->
	<target name="plugin_init_plugins_files" if="contrib.jar.present" depends="db_core_init">	
		<fileset id="sql.plugin.files" dir="${basedir}">
			<include name="plugins/**/plugin/*.sql" />
		</fileset>	
		<pathconvert refid="sql.plugin.files" setonempty="false" property="exists.sql.plugin.files"/>
	</target>
	
	<!-- Create the plugins database -->
	<target name="drop_and_create_db_plugins" depends="plugin_init_plugins_files" if="exists.sql.plugin.files">
	
		<if>
			<equals arg1="${plugins.poolservice}" arg2="${portal.poolservice}" />
			<then>
	
				<propertyregex property="baseUrlPlugins" input="${plugins.url}" regexp="(.*)/(.*)\?(.*)" replace="\1" casesensitive="true" override="true" />
				<propertyregex property="baseNamePlugins" input="${plugins.url}" regexp="(.*)/(.*)\?(.*)" replace="\2" casesensitive="true" override="true" />
				
				<echo message="Create the plugins database ${baseNamePlugins} on host ${baseUrlPlugins}" />
				
				<sql driver="${plugins.driver}" 
						           url="${baseUrlPlugins}" 
						           userid="${plugins.user}" 
						           password="${plugins.password}"
						           classpath="${db.connector.path}">
						DROP DATABASE IF EXISTS ${baseNamePlugins};
						CREATE DATABASE IF NOT EXISTS ${baseNamePlugins};
						USE ${baseName};
				</sql>
			</then>
			<else>
					<echo level="warning">
		"plugins" pool wasn't defined in db.properties file.
		All tables will be create in core pool portal.
					</echo>
			</else>
		</if>
	</target>
	
	<!-- init the plugins data base if existe -->
	<target name="db_plugin_init" depends="drop_and_create_db_plugins" if="exists.sql.plugin.files">
		
		<if>
			<equals arg1="${plugins.poolservice}" arg2="${portal.poolservice}" />
			<then>
		
				<sql driver="${plugins.driver}" url="${plugins.url}" userid="${plugins.user}" password="${plugins.password}" encoding="utf8" onerror="${on_sql_error}">
					<fileset refid="sql.plugin.files"/>
					<classpath>
						<pathelement location="${db.connector.path}" />
					</classpath>
				</sql>
			</then>
			<else>
					
					<sql driver="${portal.driver}" url="${portal.url}" userid="${portal.user}" password="${portal.password}" encoding="utf8" onerror="${on_sql_error}">
							<fileset refid="sql.plugin.files"/>
							<classpath>
								<pathelement location="${db.connector.path}" />
							</classpath>
						</sql>
			</else>
		</if>
	</target>
	
	<!-- UPDATE command line -->
	
	<!-- init the list spesifics pools for update -->
	<target name="init_list_db_plugins_specific_database_update" if="contrib.jar.present" depends="init_update" >
		
		<property name="list_plugins" value=""/>	
		<property name="before_pool" value=""/>
		<for param="file">
			<path>
			    <fileset dir="${basedir}">
					<include name="plugins/**/upgrade/*.sql" />
			    </fileset>
			</path>
			<sequential>
			
				<dirname property="file.@{file}" file="@{file}"/>
				<propertyregex property="pool" input="${file.@{file}}" regexp="(.*)\\(.*)\\upgrade" replace="\2" casesensitive="true" override="true" />
  			    <propertyregex property="pool" input="${file.@{file}}" regexp="(.*)/(.*)/upgrade" replace="\2" casesensitive="true" override="true" />
				
				<if>
				 <equals arg1="${before_pool}" arg2="${pool}" />
				 <then>

				 </then>
				 <else>
				 	<propertyregex property="list_plugins" input="${list_plugins}" regexp="(.*)" replace="\1${pool}," global="false" casesensitive="true" override="true" />		 
				 	<propertyregex property="before_pool" input="${pool}" regexp="(.*)" replace="\1" casesensitive="true" override="true" />			 	
				 </else>
				</if>
				
			</sequential>
		</for>
	</target>
	
	<!-- update spesifics pools -->
	<target name="db_plugins_specific_database_update" if="contrib.jar.present" depends="init_list_db_plugins_specific_database_update">
		<for list="${list_plugins}" delimiter="," param="pool">
			<sequential>
				<fileset id="sql.plugin.files" dir="${basedir}">
					<include name="plugins/**/@{pool}/plugin/*.sql" />
				</fileset>
				<pathconvert refid="sql.plugin.files" setonempty="false" property="exists.sql.plugin.files"/>
				
				<echo message="" />
				<echo message="======================================================================" />
				
				<if>
				 <equals arg1="${@{pool}.poolservice}" arg2="${portal.poolservice}" />
				 <then>
				
				<echo >db_@{pool}_init:</echo>
				
				<propertyregex property="baseUrl@{pool}" input="${@{pool}.url}" regexp="(.*)/(.*)\?(.*)" replace="\1" casesensitive="true" override="true" />
				<propertyregex property="baseName@{pool}" input="${@{pool}.url}" regexp="(.*)/(.*)\?(.*)" replace="\2" casesensitive="true" override="true" />
				
				<echo message="" />
				<echo>Update the "@{pool}" database "${baseName@{pool}}" on host "${baseUrl@{pool}}"</echo>

				<echo message="" />
				<echo message="Preparing plugin @{pool} database" />
						<sql driver="${@{pool}.driver}" url="${@{pool}.url}" userid="${@{pool}.user}" password="${@{pool}.password}" encoding="utf8" onerror="${on_sql_error}">
							<fileset refid="sql.plugin.files"/>
							<classpath>
								<pathelement location="${db.connector.path}" />
							</classpath>
						</sql>		
				
				</then>
				 <else>
					<echo >db_@{pool}_init:</echo>
					<echo message="" />
					<echo level="warning">
		"@{pool}" pool wasn't defined in db.properties file.
		All tables will be update in core pool portal.
					</echo>
					
					<sql driver="${portal.driver}" url="${portal.url}" userid="${portal.user}" password="${portal.password}" encoding="utf8" onerror="${on_sql_error}">
							<fileset refid="sql.plugin.files"/>
							<classpath>
								<pathelement location="${db.connector.path}" />
							</classpath>
						</sql>
				 </else>
				 </if>
				
				
			</sequential>
		</for>
		
	</target>

	<!-- SPESIFICS command line (by default) -->

	<!-- init the list spesifics pools -->
	<target name="init_list_db_plugins_specific_database" if="contrib.jar.present" depends="db_core_init" >
		
		<property name="list_plugins" value=""/>	
		<property name="before_pool" value=""/>
		<for param="file">
			<path>
			    <fileset dir="${basedir}">
					<include name="plugins/**/plugin/*.sql" />
			    </fileset>
			</path>
			<sequential>
			
				<dirname property="file.@{file}" file="@{file}"/>
				<propertyregex property="pool" input="${file.@{file}}" regexp="(.*)\\(.*)\\plugin" replace="\2" casesensitive="true" override="true" />
  			    <propertyregex property="pool" input="${file.@{file}}" regexp="(.*)/(.*)/plugin" replace="\2" casesensitive="true" override="true" />
				
				<if>
				 <equals arg1="${before_pool}" arg2="${pool}" />
				 <then>

				 </then>
				 <else>
				 	<propertyregex property="list_plugins" input="${list_plugins}" regexp="(.*)" replace="\1${pool}," global="false" casesensitive="true" override="true" />		 
				 	<propertyregex property="before_pool" input="${pool}" regexp="(.*)" replace="\1" casesensitive="true" override="true" />			 	
				 </else>
				</if>
				
			</sequential>
		</for>
	</target>
	
	<!-- create and init spesifics pools -->
	<target name="db_plugins_specific_database_init" if="contrib.jar.present" depends="init_list_db_plugins_specific_database">
		<for list="${list_plugins}" delimiter="," param="pool">
			<sequential>
				<fileset id="sql.plugin.files" dir="${basedir}">
					<include name="plugins/**/@{pool}/plugin/*.sql" />
				</fileset>
				<pathconvert refid="sql.plugin.files" setonempty="false" property="exists.sql.plugin.files"/>
				
				<echo message="" />
				<echo message="======================================================================" />
				
				<if>
				 <equals arg1="${@{pool}.poolservice}" arg2="${portal.poolservice}" />
				 <then>
				
				<echo >db_@{pool}_init:</echo>
				
				<propertyregex property="baseUrl@{pool}" input="${@{pool}.url}" regexp="(.*)/(.*)\?(.*)" replace="\1" casesensitive="true" override="true" />
				<propertyregex property="baseName@{pool}" input="${@{pool}.url}" regexp="(.*)/(.*)\?(.*)" replace="\2" casesensitive="true" override="true" />
				
				<echo message="" />
				<echo>Create the "@{pool}" database "${baseName@{pool}}" on host "${baseUrl@{pool}}"</echo>
				<sql driver="${@{pool}.driver}" 
									url="${baseUrl@{pool}}" 
							 		userid="${@{pool}.user}" 
						   			password="${@{pool}.password}"
						  			classpath="${db.connector.path}">
								DROP DATABASE IF EXISTS ${baseName@{pool}};
								CREATE DATABASE IF NOT EXISTS ${baseName@{pool}};
								USE ${baseName@{pool}};
				</sql>
				
				<echo message="" />
				<echo message="Preparing plugin @{pool} database" />
						<sql driver="${@{pool}.driver}" url="${@{pool}.url}" userid="${@{pool}.user}" password="${@{pool}.password}" encoding="utf8" onerror="${on_sql_error}">
							<fileset refid="sql.plugin.files"/>
							<classpath>
								<pathelement location="${db.connector.path}" />
							</classpath>
						</sql>		
				
				</then>
				 <else>
					<echo >db_@{pool}_init:</echo>
					<echo message="" />
					<echo level="warning">
		"@{pool}" pool wasn't defined in db.properties file.
		All tables will be create in core pool portal.
					</echo>
					
					<sql driver="${portal.driver}" url="${portal.url}" userid="${portal.user}" password="${portal.password}" encoding="utf8" onerror="${on_sql_error}">
							<fileset refid="sql.plugin.files"/>
							<classpath>
								<pathelement location="${db.connector.path}" />
							</classpath>
						</sql>
				 </else>
				 </if>
				
				
			</sequential>
		</for>
		
	</target>
	
	<!-- DB_INIT_OLD_STRUCTURE command line -->
	
	<!-- Target to be used with old sql directory structure --> 
	<target name="db_init_old_structure" unless="contrib.jar.present" depends="db_core_init">
		<echo message="Preparing unique database for all plugins." />
		<sql driver="${portal.driver}" url="${portal.url}" userid="${portal.user}" password="${portal.password}" encoding="utf8" onerror="${on_sql_error}">
			<fileset dir="${basedir}">
				<include name="plugins/**/*.sql" />
			</fileset>
			<classpath>
				<pathelement location="${db.connector.path}" />
			</classpath>
		</sql>
	</target>
</project>